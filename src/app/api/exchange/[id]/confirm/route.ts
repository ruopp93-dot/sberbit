import { NextRequest, NextResponse } from 'next/server';
import { bot } from '@/lib/bot';
import { OrdersStore } from '@/lib/ordersStore';
import { sendOrderStatusEmail } from '@/lib/email';

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    const existing = OrdersStore.get(id);
    if (!existing) {
      return NextResponse.json(
        { error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', details: `–ó–∞—è–≤–∫–∞ —Å ID ${id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç` },
        { status: 404 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const now = new Date();
    const createdAt = existing.createdAt || now.toLocaleDateString('ru-RU');
    const lastStatusUpdate = `${now.toLocaleDateString('ru-RU')}, ${now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
    const updated = {
      ...existing,
      status: '–ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Äî –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏',
      createdAt,
      lastStatusUpdate,
    };
    OrdersStore.save(updated);
    const chatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
    if (chatId) {
      const text = [
        `üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –∑–∞—è–≤–∫–∏ #${id}`,
        '',
        `–û—Ç–¥–∞–µ—Ç–µ: ${updated.fromAmount} ${updated.fromCurrency}`,
        updated.fromAccount ? `–°–æ —Å—á–µ—Ç–∞: ${updated.fromAccount}` : undefined,
        updated.email ? `Email: ${updated.email}` : undefined,
        `–ü–æ–ª—É—á–∞–µ—Ç–µ: ${updated.toAmount} ${updated.toCurrency}`,
        `–ù–∞ —Å—á–µ—Ç: ${updated.toAccount}`,
        '',
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.'
      ].filter(Boolean).join('\n');
      await bot.api.sendMessage(chatId, text);
    }

    // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    try {
      await sendOrderStatusEmail(
        updated.email,
        `–ó–∞—è–≤–∫–∞ #${updated.id}: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç–æ`,
        {
          id: updated.id,
          status: updated.status,
          email: updated.email,
          fromAmount: updated.fromAmount,
          fromCurrency: updated.fromCurrency,
          toAmount: updated.toAmount,
          toCurrency: updated.toCurrency,
          toAccount: updated.toAccount,
          createdAt: updated.createdAt,
          lastStatusUpdate: updated.lastStatusUpdate,
          paymentDetails: updated.paymentDetails,
          siteUrl: process.env.NEXT_PUBLIC_SITE_URL,
        }
      );
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', e);
    }

    return NextResponse.json({ success: true, order: updated });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã' },
      { status: 500 }
    );
  }
}
